'use client';

import {Button} from '@/components/Button';
import {Drawer} from '@/components/Drawer';
import {Text} from '@/components/Text';
import {Column} from '@/components/layout/Column';
import {Row} from '@/components/layout/Row';
import {useToggler} from '@/hooks/useToggler';
import Image from 'next/image';
import participantImage from './participant.svg';
import Link from 'next/link';
import {useEffect, useState} from 'react';
import {joinGroup} from '@/api';

const GroupHost = ({ownerName}: {ownerName: string}) => {
    return (
        <Column flex="1" gap="2" alignItems="center">
            <Image src="https://cdn-icons-png.flaticon.com/128/4128/4128176.png" width="48" height="48" alt="avatar" />
            <Column gap="1">
                <Text align="center" size={12} weight={500}>
                    {ownerName}
                </Text>
                <Text align="center" size={10} weight={400} color="#303234A3">
                    –°–æ–∑–¥–∞—Ç–µ–ª—å –≥—Ä—É–ø–ø—ã
                </Text>
            </Column>
        </Column>
    );
};

const GroupParticipant = () => {
    return (
        <Column flex="1" gap="2" alignItems="center">
            <Image src={participantImage} width="48" height="48" alt="avatar" />
            <Column gap="1">
                <Text align="center" size={12} weight={600}>
                    –î–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏ –Ω—É–∂–µ–Ω –µ—â—ë{' '}
                    <Text weight={600} color="#F40C43">
                        1 —á–µ–ª–æ–≤–µ–∫
                    </Text>
                </Text>
            </Column>
        </Column>
    );
};

const JoinGroupContent = ({
    onGroupJoined,
    ownerName,
    groupId,
}: {
    groupId: number;
    ownerName: string;
    onGroupJoined: (joined: boolean) => void;
}) => {
    const onJoinGroupClick = async () => {
        await joinGroup({groupId});
        onGroupJoined(true);
    };

    return (
        <Column gap="10">
            <Column alignItems="center" gap="1">
                <Text size={16} weight={600}>
                    –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–∫—É–ø–∫–µ
                </Text>
                <Text align="center" size={10} weight={400} color="#303234A3">
                    –ï—Å–ª–∏ –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å —Å–µ–π—á–∞—Å, —Ç–æ –∫—É–ø–∏—Ç–µ –¥–µ—à–µ–≤–ª–µ —Å—Ä–∞–∑—É
                </Text>
            </Column>
            <Row>
                <GroupHost ownerName={ownerName} />
                <GroupParticipant />
            </Row>
            <Column gap="4" alignItems="center">
                <Text size={12} weight={500}>
                    –ó–∞–∫—Ä—ã—Ç–∏–µ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑: <Text color="#303234A3">23:19:00</Text>
                </Text>
                <Button width="full" onClick={onJoinGroupClick}>
                    –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
                </Button>
            </Column>
        </Column>
    );
};

const GroupJoinedContent = () => {
    return (
        <Column gap="10">
            <Column gap="2" alignItems="center">
                ü•≥
                <Text align="center" size={16} weight={600} color="#4FDE38">
                    –ì—Ä—É–ø–ø–∞ —Å–æ–±—Ä–∞–Ω–∞!
                </Text>
            </Column>
            <Column gap="2" alignItems="center">
                <Text size={14} weight={500}>
                    –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É
                </Text>
                <Text align="center" size={10} weight={400} color="#303234A3">
                    –û–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ
                </Text>
            </Column>
            <Button width="full">
                <Link href="/basket">–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –æ–ø–ª–∞—Ç–∏—Ç—å</Link>
            </Button>
        </Column>
    );
};

type Props = {
    ownerName: string;
    groupId: number;
};

export const JoinGroupDrawer = ({ownerName, groupId}: Props) => {
    const [isGroupJoined, setGroupJoined] = useState(false);

    const {isActive, toggle} = useToggler();

    useEffect(() => {
        if (isActive) {
            setGroupJoined(false);
        }
    }, [isActive]);

    return (
        <>
            <Button onClick={toggle} size="m">
                –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
            </Button>
            <Drawer isOpen={isActive} onClose={toggle}>
                {isGroupJoined ? (
                    <GroupJoinedContent />
                ) : (
                    <JoinGroupContent groupId={groupId} ownerName={ownerName} onGroupJoined={setGroupJoined} />
                )}
            </Drawer>
        </>
    );
};
